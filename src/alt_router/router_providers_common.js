'use strict';"use strict";
var core_1 = require('angular2/core');
var common_1 = require('angular2/platform/common');
var router_1 = require('./router');
var router_url_serializer_1 = require('./router_url_serializer');
var core_2 = require('angular2/core');
var exceptions_1 = require('angular2/src/facade/exceptions');
exports.ROUTER_PROVIDERS_COMMON = [
    router_1.RouterOutletMap,
    /*@ts2dart_Provider*/ { provide: router_url_serializer_1.RouterUrlSerializer, useClass: router_url_serializer_1.DefaultRouterUrlSerializer },
    /*@ts2dart_Provider*/ { provide: common_1.LocationStrategy, useClass: common_1.PathLocationStrategy }, common_1.Location,
    /*@ts2dart_Provider*/ {
        provide: router_1.Router,
        useFactory: routerFactory,
        deps: /*@ts2dart_const*/ [core_2.ApplicationRef, core_1.ComponentResolver, router_url_serializer_1.RouterUrlSerializer, router_1.RouterOutletMap, common_1.Location],
    },
];
function routerFactory(app, componentResolver, urlSerializer, routerOutletMap, location) {
    if (app.componentTypes.length == 0) {
        throw new exceptions_1.BaseException("Bootstrap at least one component before injecting Router.");
    }
    return new router_1.Router(app.componentTypes[0], componentResolver, urlSerializer, routerOutletMap, location);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3Byb3ZpZGVyc19jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWZmaW5nX3BsdWdpbl93cmFwcGVyLW91dHB1dF9wYXRoLVJQeW4xWVVXLnRtcC9hbmd1bGFyMi9zcmMvYWx0X3JvdXRlci9yb3V0ZXJfcHJvdmlkZXJzX2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEscUJBQTZDLGVBQWUsQ0FBQyxDQUFBO0FBQzdELHVCQUErRCwwQkFBMEIsQ0FBQyxDQUFBO0FBQzFGLHVCQUFzQyxVQUFVLENBQUMsQ0FBQTtBQUNqRCxzQ0FBOEQseUJBQXlCLENBQUMsQ0FBQTtBQUN4RixxQkFBNkIsZUFBZSxDQUFDLENBQUE7QUFDN0MsMkJBQTRCLGdDQUFnQyxDQUFDLENBQUE7QUFFaEQsK0JBQXVCLEdBQTRCO0lBQzlELHdCQUFlO0lBQ2YscUJBQXFCLENBQUMsRUFBQyxPQUFPLEVBQUUsMkNBQW1CLEVBQUUsUUFBUSxFQUFFLGtEQUEwQixFQUFDO0lBQzFGLHFCQUFxQixDQUFDLEVBQUMsT0FBTyxFQUFFLHlCQUFnQixFQUFFLFFBQVEsRUFBRSw2QkFBb0IsRUFBQyxFQUFFLGlCQUFRO0lBQzNGLHFCQUFxQixDQUFDO1FBQ3BCLE9BQU8sRUFBRSxlQUFNO1FBQ2YsVUFBVSxFQUFFLGFBQWE7UUFDekIsSUFBSSxFQUFFLGtCQUFrQixDQUNwQixDQUFDLHFCQUFjLEVBQUUsd0JBQWlCLEVBQUUsMkNBQW1CLEVBQUUsd0JBQWUsRUFBRSxpQkFBUSxDQUFDO0tBQ3hGO0NBQ0YsQ0FBQztBQUVGLHVCQUF1QixHQUFtQixFQUFFLGlCQUFvQyxFQUN6RCxhQUFrQyxFQUFFLGVBQWdDLEVBQ3BFLFFBQWtCO0lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxJQUFJLDBCQUFhLENBQUMsMkRBQTJELENBQUMsQ0FBQztJQUN2RixDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksZUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFDeEUsUUFBUSxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T3BhcXVlVG9rZW4sIENvbXBvbmVudFJlc29sdmVyfSBmcm9tICdhbmd1bGFyMi9jb3JlJztcbmltcG9ydCB7TG9jYXRpb25TdHJhdGVneSwgUGF0aExvY2F0aW9uU3RyYXRlZ3ksIExvY2F0aW9ufSBmcm9tICdhbmd1bGFyMi9wbGF0Zm9ybS9jb21tb24nO1xuaW1wb3J0IHtSb3V0ZXIsIFJvdXRlck91dGxldE1hcH0gZnJvbSAnLi9yb3V0ZXInO1xuaW1wb3J0IHtSb3V0ZXJVcmxTZXJpYWxpemVyLCBEZWZhdWx0Um91dGVyVXJsU2VyaWFsaXplcn0gZnJvbSAnLi9yb3V0ZXJfdXJsX3NlcmlhbGl6ZXInO1xuaW1wb3J0IHtBcHBsaWNhdGlvblJlZn0gZnJvbSAnYW5ndWxhcjIvY29yZSc7XG5pbXBvcnQge0Jhc2VFeGNlcHRpb259IGZyb20gJ2FuZ3VsYXIyL3NyYy9mYWNhZGUvZXhjZXB0aW9ucyc7XG5cbmV4cG9ydCBjb25zdCBST1VURVJfUFJPVklERVJTX0NPTU1PTjogYW55W10gPSAvKkB0czJkYXJ0X2NvbnN0Ki9bXG4gIFJvdXRlck91dGxldE1hcCxcbiAgLypAdHMyZGFydF9Qcm92aWRlciovIHtwcm92aWRlOiBSb3V0ZXJVcmxTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdFJvdXRlclVybFNlcmlhbGl6ZXJ9LFxuICAvKkB0czJkYXJ0X1Byb3ZpZGVyKi8ge3Byb3ZpZGU6IExvY2F0aW9uU3RyYXRlZ3ksIHVzZUNsYXNzOiBQYXRoTG9jYXRpb25TdHJhdGVneX0sIExvY2F0aW9uLFxuICAvKkB0czJkYXJ0X1Byb3ZpZGVyKi8ge1xuICAgIHByb3ZpZGU6IFJvdXRlcixcbiAgICB1c2VGYWN0b3J5OiByb3V0ZXJGYWN0b3J5LFxuICAgIGRlcHM6IC8qQHRzMmRhcnRfY29uc3QqL1xuICAgICAgICBbQXBwbGljYXRpb25SZWYsIENvbXBvbmVudFJlc29sdmVyLCBSb3V0ZXJVcmxTZXJpYWxpemVyLCBSb3V0ZXJPdXRsZXRNYXAsIExvY2F0aW9uXSxcbiAgfSxcbl07XG5cbmZ1bmN0aW9uIHJvdXRlckZhY3RvcnkoYXBwOiBBcHBsaWNhdGlvblJlZiwgY29tcG9uZW50UmVzb2x2ZXI6IENvbXBvbmVudFJlc29sdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICB1cmxTZXJpYWxpemVyOiBSb3V0ZXJVcmxTZXJpYWxpemVyLCByb3V0ZXJPdXRsZXRNYXA6IFJvdXRlck91dGxldE1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IExvY2F0aW9uKTogUm91dGVyIHtcbiAgaWYgKGFwcC5jb21wb25lbnRUeXBlcy5sZW5ndGggPT0gMCkge1xuICAgIHRocm93IG5ldyBCYXNlRXhjZXB0aW9uKFwiQm9vdHN0cmFwIGF0IGxlYXN0IG9uZSBjb21wb25lbnQgYmVmb3JlIGluamVjdGluZyBSb3V0ZXIuXCIpO1xuICB9XG4gIHJldHVybiBuZXcgUm91dGVyKGFwcC5jb21wb25lbnRUeXBlc1swXSwgY29tcG9uZW50UmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXIsIHJvdXRlck91dGxldE1hcCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24pO1xufSJdfQ==