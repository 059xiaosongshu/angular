'use strict';"use strict";
var lang_1 = require('angular2/src/facade/lang');
var compile_metadata_1 = require('../compile_metadata');
var identifiers_1 = require('../identifiers');
var o = require('../output/output_ast');
var parse_util_1 = require('../parse_util');
var provider_parser_1 = require('../provider_parser');
var constants_1 = require('./constants');
var util_1 = require('./util');
var mainModuleProp = o.THIS_EXPR.prop('mainModule');
var parentInjectorProp = o.THIS_EXPR.prop('parent');
var InjectorCompileResult = (function () {
    function InjectorCompileResult(statements, injectorFactoryVar) {
        this.statements = statements;
        this.injectorFactoryVar = injectorFactoryVar;
    }
    return InjectorCompileResult;
}());
exports.InjectorCompileResult = InjectorCompileResult;
var InjectorCompiler = (function () {
    function InjectorCompiler() {
    }
    InjectorCompiler.prototype.compileInjector = function (injectorModuleMeta) {
        var builder = new _InjectorBuilder(injectorModuleMeta);
        var sourceFileName = lang_1.isPresent(injectorModuleMeta.moduleUrl) ?
            "in InjectorModule " + injectorModuleMeta.name + " in " + injectorModuleMeta.moduleUrl :
            "in InjectorModule " + injectorModuleMeta.name;
        var sourceFile = new parse_util_1.ParseSourceFile('', sourceFileName);
        var providerParser = new provider_parser_1.AppProviderParser(new parse_util_1.ParseSourceSpan(new parse_util_1.ParseLocation(sourceFile, null, null, null), new parse_util_1.ParseLocation(sourceFile, null, null, null)), injectorModuleMeta.providers);
        providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
        var injectorClass = builder.build();
        var injectorFactoryVar = injectorClass.name + "Factory";
        var injectorFactoryFnVar = injectorClass.name + "FactoryClosure";
        var injectorFactoryFn = o.fn(injectorClass.constructorMethod.params, [
            new o.ReturnStatement(o.variable(injectorClass.name)
                .instantiate(injectorClass.constructorMethod.params.map(function (param) { return o.variable(param.name); })))
        ], o.importType(identifiers_1.Identifiers.Injector))
            .toDeclStmt(injectorFactoryFnVar);
        var injectorFactoryStmt = o.variable(injectorFactoryVar)
            .set(o.importExpr(identifiers_1.Identifiers.InjectorFactory, [o.importType(injectorModuleMeta)])
            .instantiate([o.variable(injectorFactoryFnVar)], o.importType(identifiers_1.Identifiers.InjectorFactory, [o.importType(injectorModuleMeta)], [o.TypeModifier.Const])))
            .toDeclStmt(null, [o.StmtModifier.Final]);
        return new InjectorCompileResult([injectorClass, injectorFactoryFn, injectorFactoryStmt], injectorFactoryVar);
    };
    return InjectorCompiler;
}());
exports.InjectorCompiler = InjectorCompiler;
var _InjectorBuilder = (function () {
    function _InjectorBuilder(_mainModuleType) {
        this._mainModuleType = _mainModuleType;
        this._instances = new compile_metadata_1.CompileTokenMap();
        this._fields = [];
        this._ctorStmts = [];
        this._getters = [];
        this._needsMainModule = false;
        this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector), o.THIS_EXPR);
    }
    _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
        var _this = this;
        var providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
        var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
        var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
        this._instances.add(resolvedProvider.token, instance);
    };
    _InjectorBuilder.prototype.build = function () {
        var _this = this;
        this._ctorStmts.push(o.SUPER_EXPR.callFn([
            o.variable(parentInjectorProp.name),
            o.literal(this._needsMainModule),
            o.variable(mainModuleProp.name)
        ])
            .toStmt());
        var getMethodStmts = this._instances.keys().map(function (token) {
            var providerExpr = _this._instances.get(token);
            return new o.IfStmt(constants_1.InjectMethodVars.token.identical(util_1.createDiTokenExpression(token)), [new o.ReturnStatement(providerExpr)]);
        });
        getMethodStmts.push(new o.IfStmt(constants_1.InjectMethodVars.token.identical(util_1.createDiTokenExpression(identifiers_1.identifierToken(this._mainModuleType)))
            .and(o.not(mainModuleProp.equals(o.NULL_EXPR))), [new o.ReturnStatement(mainModuleProp)]));
        var methods = [
            new o.ClassMethod('getInternal', [
                new o.FnParam(constants_1.InjectMethodVars.token.name, o.DYNAMIC_TYPE),
                new o.FnParam(constants_1.InjectMethodVars.notFoundResult.name, o.DYNAMIC_TYPE)
            ], getMethodStmts.concat([new o.ReturnStatement(constants_1.InjectMethodVars.notFoundResult)]), o.DYNAMIC_TYPE)
        ];
        var ctor = new o.ClassMethod(null, [
            new o.FnParam(parentInjectorProp.name, o.importType(identifiers_1.Identifiers.Injector)),
            new o.FnParam(mainModuleProp.name, o.importType(this._mainModuleType))
        ], this._ctorStmts);
        var injClassName = this._mainModuleType.name + "Injector";
        return new o.ClassStmt(injClassName, o.importExpr(identifiers_1.Identifiers.CodegenInjector, [o.importType(this._mainModuleType)]), this._fields, this._getters, ctor, methods);
    };
    _InjectorBuilder.prototype._getProviderValue = function (provider) {
        var _this = this;
        var result;
        if (lang_1.isPresent(provider.useExisting)) {
            result = this._getDependency(new compile_metadata_1.CompileDiDependencyMetadata({ token: provider.useExisting }));
        }
        else if (lang_1.isPresent(provider.useFactory)) {
            var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
            var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
            result = o.importExpr(provider.useFactory).callFn(depsExpr);
        }
        else if (lang_1.isPresent(provider.useClass)) {
            var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
            var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
            result =
                o.importExpr(provider.useClass).instantiate(depsExpr, o.importType(provider.useClass));
        }
        else {
            result = util_1.convertValueToOutputAst(provider.useValue);
        }
        if (lang_1.isPresent(provider.useProperty)) {
            result = result.prop(provider.useProperty);
        }
        return result;
    };
    _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
        var resolvedProviderValueExpr;
        var type;
        if (isMulti) {
            resolvedProviderValueExpr = o.literalArr(providerValueExpressions);
            type = new o.ArrayType(o.DYNAMIC_TYPE);
        }
        else {
            resolvedProviderValueExpr = providerValueExpressions[0];
            type = providerValueExpressions[0].type;
        }
        if (lang_1.isBlank(type)) {
            type = o.DYNAMIC_TYPE;
        }
        if (isEager) {
            this._fields.push(new o.ClassField(propName, type));
            this._ctorStmts.push(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
        }
        else {
            var internalField = "_" + propName;
            this._fields.push(new o.ClassField(internalField, type));
            // Note: Equals is important for JS so that it also checks the undefined case!
            var getterStmts = [
                new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(), [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),
                new o.ReturnStatement(o.THIS_EXPR.prop(internalField))
            ];
            this._getters.push(new o.ClassGetter(propName, getterStmts, type));
        }
        return o.THIS_EXPR.prop(propName);
    };
    _InjectorBuilder.prototype._getDependency = function (dep) {
        var result = null;
        if (dep.isValue) {
            result = o.literal(dep.value);
        }
        if (!dep.isSkipSelf) {
            if (lang_1.isBlank(result)) {
                result = this._instances.get(dep.token);
            }
            if (lang_1.isBlank(result) && dep.token.equalsTo(identifiers_1.identifierToken(this._mainModuleType))) {
                this._needsMainModule = true;
                result = mainModuleProp;
            }
        }
        if (lang_1.isBlank(result)) {
            var args = [util_1.createDiTokenExpression(dep.token)];
            if (dep.isOptional) {
                args.push(o.NULL_EXPR);
            }
            result = parentInjectorProp.callMethod('get', args);
        }
        return result;
    };
    return _InjectorBuilder;
}());
//# sourceMappingURL=data:application/json;base64,