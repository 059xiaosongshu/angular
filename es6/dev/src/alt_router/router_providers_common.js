import { ComponentResolver } from 'angular2/core';
import { LocationStrategy, PathLocationStrategy, Location } from 'angular2/platform/common';
import { Router, RouterOutletMap } from './router';
import { RouterUrlSerializer, DefaultRouterUrlSerializer } from './router_url_serializer';
import { CONST_EXPR } from 'angular2/src/facade/lang';
import { ApplicationRef, Provider } from 'angular2/core';
import { BaseException } from 'angular2/src/facade/exceptions';
export const ROUTER_PROVIDERS_COMMON = CONST_EXPR([
    RouterOutletMap,
    CONST_EXPR(new Provider(RouterUrlSerializer, { useClass: DefaultRouterUrlSerializer })),
    CONST_EXPR(new Provider(LocationStrategy, { useClass: PathLocationStrategy })),
    Location,
    CONST_EXPR(new Provider(Router, {
        useFactory: routerFactory,
        deps: CONST_EXPR([
            ApplicationRef,
            ComponentResolver,
            RouterUrlSerializer,
            RouterOutletMap,
            Location
        ])
    }))
]);
function routerFactory(app, componentResolver, urlSerializer, routerOutletMap, location) {
    if (app.componentTypes.length == 0) {
        throw new BaseException("Bootstrap at least one component before injecting Router.");
    }
    return new Router(app.componentTypes[0], componentResolver, urlSerializer, routerOutletMap, location);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3Byb3ZpZGVyc19jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWZmaW5nX3BsdWdpbl93cmFwcGVyLW91dHB1dF9wYXRoLUsycDZUQ0hDLnRtcC9hbmd1bGFyMi9zcmMvYWx0X3JvdXRlci9yb3V0ZXJfcHJvdmlkZXJzX2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxFQUFjLGlCQUFpQixFQUFDLE1BQU0sZUFBZTtPQUNyRCxFQUFDLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBQyxNQUFNLDBCQUEwQjtPQUNsRixFQUFDLE1BQU0sRUFBRSxlQUFlLEVBQUMsTUFBTSxVQUFVO09BQ3pDLEVBQUMsbUJBQW1CLEVBQUUsMEJBQTBCLEVBQUMsTUFBTSx5QkFBeUI7T0FDaEYsRUFBQyxVQUFVLEVBQUMsTUFBTSwwQkFBMEI7T0FDNUMsRUFBQyxjQUFjLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZTtPQUMvQyxFQUFDLGFBQWEsRUFBQyxNQUFNLGdDQUFnQztBQUU1RCxPQUFPLE1BQU0sdUJBQXVCLEdBQVUsVUFBVSxDQUFDO0lBQ3ZELGVBQWU7SUFDZixVQUFVLENBQUMsSUFBSSxRQUFRLENBQUMsbUJBQW1CLEVBQUUsRUFBQyxRQUFRLEVBQUUsMEJBQTBCLEVBQUMsQ0FBQyxDQUFDO0lBQ3JGLFVBQVUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDLFFBQVEsRUFBRSxvQkFBb0IsRUFBQyxDQUFDLENBQUM7SUFDNUUsUUFBUTtJQUNSLFVBQVUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQ047UUFDRSxVQUFVLEVBQUUsYUFBYTtRQUN6QixJQUFJLEVBQUUsVUFBVSxDQUFDO1lBQ2YsY0FBYztZQUNkLGlCQUFpQjtZQUNqQixtQkFBbUI7WUFDbkIsZUFBZTtZQUNmLFFBQVE7U0FDVCxDQUFDO0tBQ0gsQ0FBQyxDQUFDO0NBQzVCLENBQUMsQ0FBQztBQUVILHVCQUF1QixHQUFtQixFQUFFLGlCQUFvQyxFQUN6RCxhQUFrQyxFQUFFLGVBQWdDLEVBQ3BFLFFBQWtCO0lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxJQUFJLGFBQWEsQ0FBQywyREFBMkQsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUN4RSxRQUFRLENBQUMsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPcGFxdWVUb2tlbiwgQ29tcG9uZW50UmVzb2x2ZXJ9IGZyb20gJ2FuZ3VsYXIyL2NvcmUnO1xuaW1wb3J0IHtMb2NhdGlvblN0cmF0ZWd5LCBQYXRoTG9jYXRpb25TdHJhdGVneSwgTG9jYXRpb259IGZyb20gJ2FuZ3VsYXIyL3BsYXRmb3JtL2NvbW1vbic7XG5pbXBvcnQge1JvdXRlciwgUm91dGVyT3V0bGV0TWFwfSBmcm9tICcuL3JvdXRlcic7XG5pbXBvcnQge1JvdXRlclVybFNlcmlhbGl6ZXIsIERlZmF1bHRSb3V0ZXJVcmxTZXJpYWxpemVyfSBmcm9tICcuL3JvdXRlcl91cmxfc2VyaWFsaXplcic7XG5pbXBvcnQge0NPTlNUX0VYUFJ9IGZyb20gJ2FuZ3VsYXIyL3NyYy9mYWNhZGUvbGFuZyc7XG5pbXBvcnQge0FwcGxpY2F0aW9uUmVmLCBQcm92aWRlcn0gZnJvbSAnYW5ndWxhcjIvY29yZSc7XG5pbXBvcnQge0Jhc2VFeGNlcHRpb259IGZyb20gJ2FuZ3VsYXIyL3NyYy9mYWNhZGUvZXhjZXB0aW9ucyc7XG5cbmV4cG9ydCBjb25zdCBST1VURVJfUFJPVklERVJTX0NPTU1PTjogYW55W10gPSBDT05TVF9FWFBSKFtcbiAgUm91dGVyT3V0bGV0TWFwLFxuICBDT05TVF9FWFBSKG5ldyBQcm92aWRlcihSb3V0ZXJVcmxTZXJpYWxpemVyLCB7dXNlQ2xhc3M6IERlZmF1bHRSb3V0ZXJVcmxTZXJpYWxpemVyfSkpLFxuICBDT05TVF9FWFBSKG5ldyBQcm92aWRlcihMb2NhdGlvblN0cmF0ZWd5LCB7dXNlQ2xhc3M6IFBhdGhMb2NhdGlvblN0cmF0ZWd5fSkpLFxuICBMb2NhdGlvbixcbiAgQ09OU1RfRVhQUihuZXcgUHJvdmlkZXIoUm91dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlRmFjdG9yeTogcm91dGVyRmFjdG9yeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBzOiBDT05TVF9FWFBSKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tcG9uZW50UmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSb3V0ZXJVcmxTZXJpYWxpemVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUm91dGVyT3V0bGV0TWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbl0pO1xuXG5mdW5jdGlvbiByb3V0ZXJGYWN0b3J5KGFwcDogQXBwbGljYXRpb25SZWYsIGNvbXBvbmVudFJlc29sdmVyOiBDb21wb25lbnRSZXNvbHZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgdXJsU2VyaWFsaXplcjogUm91dGVyVXJsU2VyaWFsaXplciwgcm91dGVyT3V0bGV0TWFwOiBSb3V0ZXJPdXRsZXRNYXAsXG4gICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBMb2NhdGlvbik6IFJvdXRlciB7XG4gIGlmIChhcHAuY29tcG9uZW50VHlwZXMubGVuZ3RoID09IDApIHtcbiAgICB0aHJvdyBuZXcgQmFzZUV4Y2VwdGlvbihcIkJvb3RzdHJhcCBhdCBsZWFzdCBvbmUgY29tcG9uZW50IGJlZm9yZSBpbmplY3RpbmcgUm91dGVyLlwiKTtcbiAgfVxuICByZXR1cm4gbmV3IFJvdXRlcihhcHAuY29tcG9uZW50VHlwZXNbMF0sIGNvbXBvbmVudFJlc29sdmVyLCB1cmxTZXJpYWxpemVyLCByb3V0ZXJPdXRsZXRNYXAsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uKTtcbn0iXX0=