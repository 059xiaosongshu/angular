'use strict';"use strict";
var core_1 = require('angular2/core');
var common_1 = require('angular2/platform/common');
var router_1 = require('./router');
var router_url_serializer_1 = require('./router_url_serializer');
var lang_1 = require('angular2/src/facade/lang');
var core_2 = require('angular2/core');
var exceptions_1 = require('angular2/src/facade/exceptions');
exports.ROUTER_PROVIDERS_COMMON = lang_1.CONST_EXPR([
    router_1.RouterOutletMap,
    lang_1.CONST_EXPR(new core_2.Provider(router_url_serializer_1.RouterUrlSerializer, { useClass: router_url_serializer_1.DefaultRouterUrlSerializer })),
    lang_1.CONST_EXPR(new core_2.Provider(common_1.LocationStrategy, { useClass: common_1.PathLocationStrategy })),
    common_1.Location,
    lang_1.CONST_EXPR(new core_2.Provider(router_1.Router, {
        useFactory: routerFactory,
        deps: lang_1.CONST_EXPR([
            core_2.ApplicationRef,
            core_1.ComponentResolver,
            router_url_serializer_1.RouterUrlSerializer,
            router_1.RouterOutletMap,
            common_1.Location
        ])
    }))
]);
function routerFactory(app, componentResolver, urlSerializer, routerOutletMap, location) {
    if (app.componentTypes.length == 0) {
        throw new exceptions_1.BaseException("Bootstrap at least one component before injecting Router.");
    }
    return new router_1.Router(app.componentTypes[0], componentResolver, urlSerializer, routerOutletMap, location);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3Byb3ZpZGVyc19jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaWZmaW5nX3BsdWdpbl93cmFwcGVyLW91dHB1dF9wYXRoLVc1VmdLbkJGLnRtcC9hbmd1bGFyMi9zcmMvYWx0X3JvdXRlci9yb3V0ZXJfcHJvdmlkZXJzX2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEscUJBQTZDLGVBQWUsQ0FBQyxDQUFBO0FBQzdELHVCQUErRCwwQkFBMEIsQ0FBQyxDQUFBO0FBQzFGLHVCQUFzQyxVQUFVLENBQUMsQ0FBQTtBQUNqRCxzQ0FBOEQseUJBQXlCLENBQUMsQ0FBQTtBQUN4RixxQkFBeUIsMEJBQTBCLENBQUMsQ0FBQTtBQUNwRCxxQkFBdUMsZUFBZSxDQUFDLENBQUE7QUFDdkQsMkJBQTRCLGdDQUFnQyxDQUFDLENBQUE7QUFFaEQsK0JBQXVCLEdBQVUsaUJBQVUsQ0FBQztJQUN2RCx3QkFBZTtJQUNmLGlCQUFVLENBQUMsSUFBSSxlQUFRLENBQUMsMkNBQW1CLEVBQUUsRUFBQyxRQUFRLEVBQUUsa0RBQTBCLEVBQUMsQ0FBQyxDQUFDO0lBQ3JGLGlCQUFVLENBQUMsSUFBSSxlQUFRLENBQUMseUJBQWdCLEVBQUUsRUFBQyxRQUFRLEVBQUUsNkJBQW9CLEVBQUMsQ0FBQyxDQUFDO0lBQzVFLGlCQUFRO0lBQ1IsaUJBQVUsQ0FBQyxJQUFJLGVBQVEsQ0FBQyxlQUFNLEVBQ047UUFDRSxVQUFVLEVBQUUsYUFBYTtRQUN6QixJQUFJLEVBQUUsaUJBQVUsQ0FBQztZQUNmLHFCQUFjO1lBQ2Qsd0JBQWlCO1lBQ2pCLDJDQUFtQjtZQUNuQix3QkFBZTtZQUNmLGlCQUFRO1NBQ1QsQ0FBQztLQUNILENBQUMsQ0FBQztDQUM1QixDQUFDLENBQUM7QUFFSCx1QkFBdUIsR0FBbUIsRUFBRSxpQkFBb0MsRUFDekQsYUFBa0MsRUFBRSxlQUFnQyxFQUNwRSxRQUFrQjtJQUN2QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sSUFBSSwwQkFBYSxDQUFDLDJEQUEyRCxDQUFDLENBQUM7SUFDdkYsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLGVBQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQ3hFLFFBQVEsQ0FBQyxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09wYXF1ZVRva2VuLCBDb21wb25lbnRSZXNvbHZlcn0gZnJvbSAnYW5ndWxhcjIvY29yZSc7XG5pbXBvcnQge0xvY2F0aW9uU3RyYXRlZ3ksIFBhdGhMb2NhdGlvblN0cmF0ZWd5LCBMb2NhdGlvbn0gZnJvbSAnYW5ndWxhcjIvcGxhdGZvcm0vY29tbW9uJztcbmltcG9ydCB7Um91dGVyLCBSb3V0ZXJPdXRsZXRNYXB9IGZyb20gJy4vcm91dGVyJztcbmltcG9ydCB7Um91dGVyVXJsU2VyaWFsaXplciwgRGVmYXVsdFJvdXRlclVybFNlcmlhbGl6ZXJ9IGZyb20gJy4vcm91dGVyX3VybF9zZXJpYWxpemVyJztcbmltcG9ydCB7Q09OU1RfRVhQUn0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9sYW5nJztcbmltcG9ydCB7QXBwbGljYXRpb25SZWYsIFByb3ZpZGVyfSBmcm9tICdhbmd1bGFyMi9jb3JlJztcbmltcG9ydCB7QmFzZUV4Y2VwdGlvbn0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9leGNlcHRpb25zJztcblxuZXhwb3J0IGNvbnN0IFJPVVRFUl9QUk9WSURFUlNfQ09NTU9OOiBhbnlbXSA9IENPTlNUX0VYUFIoW1xuICBSb3V0ZXJPdXRsZXRNYXAsXG4gIENPTlNUX0VYUFIobmV3IFByb3ZpZGVyKFJvdXRlclVybFNlcmlhbGl6ZXIsIHt1c2VDbGFzczogRGVmYXVsdFJvdXRlclVybFNlcmlhbGl6ZXJ9KSksXG4gIENPTlNUX0VYUFIobmV3IFByb3ZpZGVyKExvY2F0aW9uU3RyYXRlZ3ksIHt1c2VDbGFzczogUGF0aExvY2F0aW9uU3RyYXRlZ3l9KSksXG4gIExvY2F0aW9uLFxuICBDT05TVF9FWFBSKG5ldyBQcm92aWRlcihSb3V0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiByb3V0ZXJGYWN0b3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcHM6IENPTlNUX0VYUFIoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYXRpb25SZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21wb25lbnRSZXNvbHZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJvdXRlclVybFNlcmlhbGl6ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSb3V0ZXJPdXRsZXRNYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuXSk7XG5cbmZ1bmN0aW9uIHJvdXRlckZhY3RvcnkoYXBwOiBBcHBsaWNhdGlvblJlZiwgY29tcG9uZW50UmVzb2x2ZXI6IENvbXBvbmVudFJlc29sdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICB1cmxTZXJpYWxpemVyOiBSb3V0ZXJVcmxTZXJpYWxpemVyLCByb3V0ZXJPdXRsZXRNYXA6IFJvdXRlck91dGxldE1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IExvY2F0aW9uKTogUm91dGVyIHtcbiAgaWYgKGFwcC5jb21wb25lbnRUeXBlcy5sZW5ndGggPT0gMCkge1xuICAgIHRocm93IG5ldyBCYXNlRXhjZXB0aW9uKFwiQm9vdHN0cmFwIGF0IGxlYXN0IG9uZSBjb21wb25lbnQgYmVmb3JlIGluamVjdGluZyBSb3V0ZXIuXCIpO1xuICB9XG4gIHJldHVybiBuZXcgUm91dGVyKGFwcC5jb21wb25lbnRUeXBlc1swXSwgY29tcG9uZW50UmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXIsIHJvdXRlck91dGxldE1hcCxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24pO1xufSJdfQ==