import { isBlank } from 'angular2/src/facade/lang';
import { Injector, THROW_IF_NOT_FOUND } from './injector';
/**
 * An simple injector based on a Map of values.
 */
export class MapInjector {
    constructor(_parent = null, values = null, factories = null) {
        this._parent = _parent;
        this._instances = new Map();
        if (isBlank(values)) {
            values = new Map();
        }
        this._values = values;
        if (isBlank(factories)) {
            factories = new Map();
        }
        this._factories = factories;
        if (isBlank(this._parent)) {
            this._parent = Injector.NULL;
        }
    }
    static createFactory(values, factories) {
        return new MapInjectorFactory(values, factories);
    }
    get(token, notFoundValue = THROW_IF_NOT_FOUND) {
        if (token === Injector) {
            return this;
        }
        if (this._values.has(token)) {
            return this._values.get(token);
        }
        if (this._instances.has(token)) {
            return this._instances.get(token);
        }
        if (this._factories.has(token)) {
            var instance = this._factories.get(token)(this);
            this._instances.set(token, instance);
            return instance;
        }
        return this._parent.get(token, notFoundValue);
    }
}
/**
 * InjectorFactory for MapInjector.
 */
export class MapInjectorFactory {
    constructor(_values = null, _factories = null) {
        this._values = _values;
        this._factories = _factories;
    }
    create(parent = null, context = null) {
        return new MapInjector(parent, this._values, this._factories);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwX2luamVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlmZmluZ19wbHVnaW5fd3JhcHBlci1vdXRwdXRfcGF0aC1ZODdXMzRUdC50bXAvYW5ndWxhcjIvc3JjL2NvcmUvZGkvbWFwX2luamVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sMEJBQTBCO09BQ3pDLEVBQUMsUUFBUSxFQUFtQixrQkFBa0IsRUFBQyxNQUFNLFlBQVk7QUFFeEU7O0dBRUc7QUFDSDtJQVVFLFlBQW9CLE9BQU8sR0FBYSxJQUFJLEVBQUUsTUFBTSxHQUFrQixJQUFJLEVBQzlELFNBQVMsR0FBMEMsSUFBSTtRQUQvQyxZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUpwQyxlQUFVLEdBQWtCLElBQUksR0FBRyxFQUFZLENBQUM7UUFNdEQsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQVksQ0FBQztRQUMvQixDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVksQ0FBQztRQUNsQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQy9CLENBQUM7SUFDSCxDQUFDO0lBdEJELE9BQU8sYUFBYSxDQUFDLE1BQXNCLEVBQ3RCLFNBQWlEO1FBQ3BFLE1BQU0sQ0FBQyxJQUFJLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBb0JELEdBQUcsQ0FBQyxLQUFVLEVBQUUsYUFBYSxHQUFRLGtCQUFrQjtRQUNyRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNsQixDQUFDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNoRCxDQUFDO0FBQ0gsQ0FBQztBQUVEOztHQUVHO0FBQ0g7SUFDRSxZQUFvQixPQUFPLEdBQWtCLElBQUksRUFDN0IsVUFBVSxHQUEwQyxJQUFJO1FBRHhELFlBQU8sR0FBUCxPQUFPLENBQXNCO1FBQzdCLGVBQVUsR0FBVixVQUFVLENBQThDO0lBQUcsQ0FBQztJQUVoRixNQUFNLENBQUMsTUFBTSxHQUFhLElBQUksRUFBRSxPQUFPLEdBQVEsSUFBSTtRQUNqRCxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7QUFDSCxDQUFDO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQmxhbmt9IGZyb20gJ2FuZ3VsYXIyL3NyYy9mYWNhZGUvbGFuZyc7XG5pbXBvcnQge0luamVjdG9yLCBJbmplY3RvckZhY3RvcnksIFRIUk9XX0lGX05PVF9GT1VORH0gZnJvbSAnLi9pbmplY3Rvcic7XG5cbi8qKlxuICogQW4gc2ltcGxlIGluamVjdG9yIGJhc2VkIG9uIGEgTWFwIG9mIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1hcEluamVjdG9yIGltcGxlbWVudHMgSW5qZWN0b3Ige1xuICBzdGF0aWMgY3JlYXRlRmFjdG9yeSh2YWx1ZXM/OiBNYXA8YW55LCBhbnk+LFxuICAgICAgICAgICAgICAgICAgICAgICBmYWN0b3JpZXM/OiBNYXA8YW55LCAoaW5qZWN0b3I6IEluamVjdG9yKSA9PiBhbnk+KTogSW5qZWN0b3JGYWN0b3J5PGFueT4ge1xuICAgIHJldHVybiBuZXcgTWFwSW5qZWN0b3JGYWN0b3J5KHZhbHVlcywgZmFjdG9yaWVzKTtcbiAgfVxuXG4gIHByaXZhdGUgX2luc3RhbmNlczogTWFwPGFueSwgYW55PiA9IG5ldyBNYXA8YW55LCBhbnk+KCk7XG4gIHByaXZhdGUgX2ZhY3RvcmllczogTWFwPGFueSwgKGluamVjdG9yOiBJbmplY3RvcikgPT4gYW55PjtcbiAgcHJpdmF0ZSBfdmFsdWVzOiBNYXA8YW55LCBhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3BhcmVudDogSW5qZWN0b3IgPSBudWxsLCB2YWx1ZXM6IE1hcDxhbnksIGFueT4gPSBudWxsLFxuICAgICAgICAgICAgICBmYWN0b3JpZXM6IE1hcDxhbnksIChpbmplY3RvcjogSW5qZWN0b3IpID0+IGFueT4gPSBudWxsKSB7XG4gICAgaWYgKGlzQmxhbmsodmFsdWVzKSkge1xuICAgICAgdmFsdWVzID0gbmV3IE1hcDxhbnksIGFueT4oKTtcbiAgICB9XG4gICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xuICAgIGlmIChpc0JsYW5rKGZhY3RvcmllcykpIHtcbiAgICAgIGZhY3RvcmllcyA9IG5ldyBNYXA8YW55LCBhbnk+KCk7XG4gICAgfVxuICAgIHRoaXMuX2ZhY3RvcmllcyA9IGZhY3RvcmllcztcbiAgICBpZiAoaXNCbGFuayh0aGlzLl9wYXJlbnQpKSB7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBJbmplY3Rvci5OVUxMO1xuICAgIH1cbiAgfVxuICBnZXQodG9rZW46IGFueSwgbm90Rm91bmRWYWx1ZTogYW55ID0gVEhST1dfSUZfTk9UX0ZPVU5EKTogYW55IHtcbiAgICBpZiAodG9rZW4gPT09IEluamVjdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX3ZhbHVlcy5oYXModG9rZW4pKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmdldCh0b2tlbik7XG4gICAgfVxuICAgIGlmICh0aGlzLl9pbnN0YW5jZXMuaGFzKHRva2VuKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlcy5nZXQodG9rZW4pO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZmFjdG9yaWVzLmhhcyh0b2tlbikpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQodG9rZW4pKHRoaXMpO1xuICAgICAgdGhpcy5faW5zdGFuY2VzLnNldCh0b2tlbiwgaW5zdGFuY2UpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcGFyZW50LmdldCh0b2tlbiwgbm90Rm91bmRWYWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmplY3RvckZhY3RvcnkgZm9yIE1hcEluamVjdG9yLlxuICovXG5leHBvcnQgY2xhc3MgTWFwSW5qZWN0b3JGYWN0b3J5IGltcGxlbWVudHMgSW5qZWN0b3JGYWN0b3J5PGFueT4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF92YWx1ZXM6IE1hcDxhbnksIGFueT4gPSBudWxsLFxuICAgICAgICAgICAgICBwcml2YXRlIF9mYWN0b3JpZXM6IE1hcDxhbnksIChpbmplY3RvcjogSW5qZWN0b3IpID0+IGFueT4gPSBudWxsKSB7fVxuXG4gIGNyZWF0ZShwYXJlbnQ6IEluamVjdG9yID0gbnVsbCwgY29udGV4dDogYW55ID0gbnVsbCk6IEluamVjdG9yIHtcbiAgICByZXR1cm4gbmV3IE1hcEluamVjdG9yKHBhcmVudCwgdGhpcy5fdmFsdWVzLCB0aGlzLl9mYWN0b3JpZXMpO1xuICB9XG59XG4iXX0=