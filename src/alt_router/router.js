'use strict';"use strict";
var core_1 = require('angular2/core');
var lang_1 = require('angular2/src/facade/lang');
var async_1 = require('angular2/src/facade/async');
var collection_1 = require('angular2/src/facade/collection');
var exceptions_1 = require('angular2/src/facade/exceptions');
var recognize_1 = require('./recognize');
var segments_1 = require('./segments');
var lifecycle_reflector_1 = require('./lifecycle_reflector');
var constants_1 = require('./constants');
var RouterOutletMap = (function () {
    function RouterOutletMap() {
        /** @internal */
        this._outlets = {};
    }
    RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };
    return RouterOutletMap;
}());
exports.RouterOutletMap = RouterOutletMap;
var Router = (function () {
    function Router(_componentType, _componentResolver, _urlSerializer, _routerOutletMap, _location) {
        this._componentType = _componentType;
        this._componentResolver = _componentResolver;
        this._urlSerializer = _urlSerializer;
        this._routerOutletMap = _routerOutletMap;
        this._location = _location;
        this._changes = new async_1.EventEmitter();
        this.navigateByUrl(this._location.path());
    }
    Object.defineProperty(Router.prototype, "urlTree", {
        get: function () { return this._urlTree; },
        enumerable: true,
        configurable: true
    });
    Router.prototype.navigate = function (url) {
        var _this = this;
        this._urlTree = url;
        return recognize_1.recognize(this._componentResolver, this._componentType, url)
            .then(function (currTree) {
            new _LoadSegments(currTree, _this._prevTree).load(_this._routerOutletMap);
            _this._prevTree = currTree;
            _this._location.go(_this._urlSerializer.serialize(_this._urlTree));
            _this._changes.emit(null);
        });
    };
    Router.prototype.serializeUrl = function (url) { return this._urlSerializer.serialize(url); };
    Router.prototype.navigateByUrl = function (url) {
        return this.navigate(this._urlSerializer.parse(url));
    };
    Object.defineProperty(Router.prototype, "changes", {
        get: function () { return this._changes; },
        enumerable: true,
        configurable: true
    });
    return Router;
}());
exports.Router = Router;
var _LoadSegments = (function () {
    function _LoadSegments(currTree, prevTree) {
        this.currTree = currTree;
        this.prevTree = prevTree;
    }
    _LoadSegments.prototype.load = function (parentOutletMap) {
        var prevRoot = lang_1.isPresent(this.prevTree) ? segments_1.rootNode(this.prevTree) : null;
        var currRoot = segments_1.rootNode(this.currTree);
        this.loadChildSegments(currRoot, prevRoot, parentOutletMap);
    };
    _LoadSegments.prototype.loadSegments = function (currNode, prevNode, parentOutletMap) {
        var curr = currNode.value;
        var prev = lang_1.isPresent(prevNode) ? prevNode.value : null;
        var outlet = this.getOutlet(parentOutletMap, currNode.value);
        if (segments_1.equalSegments(curr, prev)) {
            this.loadChildSegments(currNode, prevNode, outlet.outletMap);
        }
        else {
            var outletMap = new RouterOutletMap();
            this.loadNewSegment(outletMap, curr, prev, outlet);
            this.loadChildSegments(currNode, prevNode, outletMap);
        }
    };
    _LoadSegments.prototype.loadNewSegment = function (outletMap, curr, prev, outlet) {
        var resolved = core_1.ReflectiveInjector.resolve([core_1.provide(RouterOutletMap, { useValue: outletMap }), core_1.provide(segments_1.RouteSegment, { useValue: curr })]);
        var ref = outlet.load(segments_1.routeSegmentComponentFactory(curr), resolved, outletMap);
        if (lifecycle_reflector_1.hasLifecycleHook("routerOnActivate", ref.instance)) {
            ref.instance.routerOnActivate(curr, prev, this.currTree, this.prevTree);
        }
    };
    _LoadSegments.prototype.loadChildSegments = function (currNode, prevNode, outletMap) {
        var _this = this;
        var prevChildren = lang_1.isPresent(prevNode) ?
            prevNode.children.reduce(function (m, c) {
                m[c.value.outlet] = c;
                return m;
            }, {}) :
            {};
        currNode.children.forEach(function (c) {
            _this.loadSegments(c, prevChildren[c.value.outlet], outletMap);
            collection_1.StringMapWrapper.delete(prevChildren, c.value.outlet);
        });
        collection_1.StringMapWrapper.forEach(prevChildren, function (v, k) { return _this.unloadOutlet(outletMap._outlets[k]); });
    };
    _LoadSegments.prototype.getOutlet = function (outletMap, segment) {
        var outlet = outletMap._outlets[segment.outlet];
        if (lang_1.isBlank(outlet)) {
            if (segment.outlet == constants_1.DEFAULT_OUTLET_NAME) {
                throw new exceptions_1.BaseException("Cannot find default outlet");
            }
            else {
                throw new exceptions_1.BaseException("Cannot find the outlet " + segment.outlet);
            }
        }
        return outlet;
    };
    _LoadSegments.prototype.unloadOutlet = function (outlet) {
        var _this = this;
        collection_1.StringMapWrapper.forEach(outlet.outletMap._outlets, function (v, k) { _this.unloadOutlet(v); });
        outlet.unload();
    };
    return _LoadSegments;
}());
//# sourceMappingURL=data:application/json;base64,